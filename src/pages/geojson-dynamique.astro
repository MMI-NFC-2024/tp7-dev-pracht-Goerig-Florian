---
import * as Plot from "@observablehq/plot";
import PlotFigure from "../components/PlotFigure.astro";
import departements from "../assets/departements.geojson.json";
import populationMain from "../assets/populationMain.json";

let selectedYear = 2015;
let selectedSex = "Total";
let selectedAge = "Total";

const listePeriode = [
  ...new Set(populationMain.map((d) => d.Période)),
].reverse();
const listeSexe = [...new Set(populationMain.map((d) => d.Sexe))];
const listeAge = [...new Set(populationMain.map((d) => d["Âge"]))];

const optionPlot = {
  projection: { type: "mercator", domain: departements },
  color: {
    type: "quantile",
    n: 8,
    scheme: "Greens",
    label: "Population en centaine de milliers",
    legend: true,
    transform: (d) => Math.round(d / 100000),
  },
  marks: [
    Plot.geo(departements, {
      fill: (d) => {
        const deptName = d.properties.nom;
        const popData = populationMain.find(
          (p) =>
            p.Géographie === deptName &&
            p.Période === selectedYear &&
            p.Sexe === selectedSex &&
            p["Âge"] === selectedAge
        );
        return popData ? popData.Valeur : null;
      },
      stroke: "#999",
      title: (d) => {
        const deptName = d.properties.nom;
        const popData = populationMain.find(
          (p) =>
            p.Géographie === deptName &&
            p.Période === selectedYear &&
            p.Sexe === selectedSex &&
            p["Âge"] === selectedAge
        );
        return popData
          ? `${deptName} : ${popData.Valeur}`
          : `${deptName} : n/a`;
      },
      tip: true,
    }),
  ],
};
---

<h1 class="text-2xl font-bold mb-4">Population par département</h1>

<!-- Rendu initial côté serveur -->
<PlotFigure options={optionPlot} />

<!-- Sélecteurs côté serveur (listes pré-calculées) -->
<div class="flex gap-3 my-4">
  <select id="periode" class="border px-2 py-1 rounded">
    {
      listePeriode.map((p, i) => (
        <option value={p} selected={i === 0}>
          {p}
        </option>
      ))
    }
  </select>

  <select id="sexe" class="border px-2 py-1 rounded">
    {
      listeSexe.map((s, i) => (
        <option value={s} selected={i === 0}>
          {s}
        </option>
      ))
    }
  </select>

  <select id="age" class="border px-2 py-1 rounded">
    {
      listeAge.map((a, i) => (
        <option value={a} selected={i === 0}>
          {a}
        </option>
      ))
    }
  </select>
</div>

<script>
  import * as Plot from "@observablehq/plot";
  import departements from "../assets/departements.geojson.json";
  import populationMain from "../assets/populationMain.json";

  const elmYear = document.getElementById("periode");
  const elmSex = document.getElementById("sexe");
  const elmAge = document.getElementById("age");

  function updatePlot() {
    const selectedYear = Number(elmYear.value);
    const selectedSex = elmSex.value;
    const selectedAge = elmAge.value;

    const optionPlot = {
      projection: { type: "mercator", domain: departements },
      color: {
        type: "quantile",
        n: 8,
        scheme: "Greens",
        label: "Population en centaine de milliers",
        legend: true,
        transform: (d) => Math.round(d / 100000),
      },
      marks: [
        Plot.geo(departements, {
          fill: (d) => {
            const deptName = d.properties.nom;
            const popData = populationMain.find(
              (p) =>
                p.Géographie === deptName &&
                p.Période === selectedYear &&
                p.Sexe === selectedSex &&
                p["Âge"] === selectedAge
            );
            return popData ? popData.Valeur : null;
          },
          stroke: "#999",
          title: (d) => {
            const deptName = d.properties.nom;
            const popData = populationMain.find(
              (p) =>
                p.Géographie === deptName &&
                p.Période === selectedYear &&
                p.Sexe === selectedSex &&
                p["Âge"] === selectedAge
            );
            return popData
              ? `${deptName} : ${popData.Valeur}`
              : `${deptName} : n/a`;
          },
          tip: true,
        }),
      ],
    };

    const figure = document.querySelector("figure");
    if (figure) {
      figure.innerHTML = "";
      figure.appendChild(Plot.plot(optionPlot));
    }
  }

  elmYear.addEventListener("change", updatePlot);
  elmSex.addEventListener("change", updatePlot);
  elmAge.addEventListener("change", updatePlot);
</script>
